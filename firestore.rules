/**
 * @file Firebase Security Rules for ImageCloak application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user can only access
 * and manage their own data, including profile information, encoded images, and encryption keys.
 *
 * @data_structure Data is organized hierarchically under the `/users/{userId}` path.
 *  - `/users/{userId}`: Stores user profile information.
 *  - `/users/{userId}/encodedImages/{encodedImageId}`: Stores encoded images created by the user.
 *  - `/users/{userId}/encryptionKeys/{encryptionKeyId}`: Stores encryption keys created by the user.
 *
 * @key_security_decisions
 *  - Listing of users is disallowed.
 *  - All write operations are protected by authorization checks to ensure data integrity and prevent unauthorized access.
 *  - Each user can only access data that is stored in their `userId` namespace.
 *
 * @denormalization_for_authorization N/A - Path-based ownership is used, eliminating the need for data denormalization.
 *
 * @structural_segregation User-specific data is stored under the `/users/{userId}` path, allowing for secure `list` operations limited to the authenticated user's resources.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the `/users/{userId}` collection, ensuring only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own user document if the `userId` matches their `auth.uid`.
     * @allow (get, update, delete) - An authenticated user can only read, update, or delete their own user document.
     * @deny (create) - An unauthenticated user cannot create a user document.
     * @deny (get, update, delete) - An authenticated user cannot read, update, or delete another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/users/{userId}/encodedImages/{encodedImageId}` collection, ensuring only the authenticated user can manage their own encoded images.
     * @path /users/{userId}/encodedImages/{encodedImageId}
     * @allow (create) - An authenticated user can create an encoded image under their user ID.
     * @allow (get, list, update, delete) - An authenticated user can only read, list, update, or delete their own encoded images.
     * @deny (create) - An unauthenticated user cannot create an encoded image.
     * @deny (get, list, update, delete) - An authenticated user cannot read, list, update, or delete another user's encoded images.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/encodedImages/{encodedImageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/users/{userId}/encryptionKeys/{encryptionKeyId}` collection, ensuring only the authenticated user can manage their own encryption keys.
     * @path /users/{userId}/encryptionKeys/{encryptionKeyId}
     * @allow (create) - An authenticated user can create an encryption key under their user ID.
     * @allow (get, list, update, delete) - An authenticated user can only read, list, update, or delete their own encryption keys.
     * @deny (create) - An unauthenticated user cannot create an encryption key.
     * @deny (get, list, update, delete) - An authenticated user cannot read, list, update, or delete another user's encryption keys.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/encryptionKeys/{encryptionKeyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}