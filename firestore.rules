/**
 * @fileoverview Firestore Security Rules for the ImageCloak application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has full control over their own data,
 * and no access to other users' data. All data is nested under /users/{userId}, ensuring clear ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/encodedImages/{encodedImageId}: Stores encoded images created by the user. Only the owner can manage these.
 * - /users/{userId}/encryptionKeys/{encryptionKeyId}: Stores encryption keys.  Only the owner can manage these.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All write operations are strictly validated against user ownership.
 * - Data shape validation is minimized for prototyping but critical relationships are enforced.
 *
 * Denormalization for Authorization:
 *   The `userId` field is present in EncodedImage and EncryptionKey documents to allow direct ownership checks without needing to query the User document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the authenticated user can access their data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - User attempts to create a profile with a userId that does not match their auth.
     * @deny (get, update, delete) - User attempts to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

            match /encodedImages/{encodedImageId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }

            match /encryptionKeys/{encryptionKeyId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
  }
}