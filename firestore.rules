/**
 * @fileOverview Firestore Security Rules for ImageCloak application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control
 * over their own data, and no user can access another user's data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated user
 *   with the matching userId can read and write to this document.
 * - /users/{userId}/encodedImages/{encodedImageId}: Stores encoded images created by
 *   the user. Only the authenticated user with the matching userId can read and
 *   write to these documents.
 * - /users/{userId}/encryptionKeys/{encryptionKeyId}: Stores encryption keys created
 *   by the user. Only the authenticated user with the matching userId can read and
 *   write to these documents.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All data is private and requires authentication.
 * - Rules are designed for authorization independence and clarity.
 *
 * Denormalization for Authorization:
 *  - The 'userId' is used in paths and is validated against request.auth.uid to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user
     *              can read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can create their own user document.
     *        (data) { id: 'z4hQnSPYUbc3mV2BIQTDCfCYCa83', email: 'test@example.com', displayName: 'Test User', createdAt: '2024-01-01T00:00:00Z' }
     * @allow (get) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can get their own user document.
     * @allow (update) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can update their own user document.
     * @allow (delete) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can delete their own user document.
     * @deny (create) User 'otherUserId' cannot create a document with userId 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     *        (data) { id: 'z4hQnSPYUbc3mV2BIQTDCfCYCa83', email: 'test@example.com', displayName: 'Test User', createdAt: '2024-01-01T00:00:00Z' }
     * @deny (get) User 'otherUserId' cannot get the user document for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @deny (update) User 'otherUserId' cannot update the user document for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @deny (delete) User 'otherUserId' cannot delete the user document for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for encoded images. Only the authenticated user
     *              can read and write their own encoded images.
     * @path /users/{userId}/encodedImages/{encodedImageId}
     * @allow (create) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can create an encoded image under their user ID.
     *        (data) { id: 'image123', userId: 'z4hQnSPYUbc3mV2BIQTDCfCYCa83', carrierImageDescription: 'A sunset', encodingDateTime: '2024-01-02T00:00:00Z', encryptionKey: 'key456' }
     * @allow (get) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can get their own encoded image.
     * @allow (list) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can list their own encoded images.
     * @allow (update) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can update their own encoded image.
     * @allow (delete) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can delete their own encoded image.
     * @deny (create) User 'otherUserId' cannot create an encoded image under user ID 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     *        (data) { id: 'image123', userId: 'z4hQnSPYUbc3mV2BIQTDCfCYCa83', carrierImageDescription: 'A sunset', encodingDateTime: '2024-01-02T00:00:00Z', encryptionKey: 'key456' }
     * @deny (get) User 'otherUserId' cannot get the encoded image for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @deny (list) User 'otherUserId' cannot list the encoded images for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @deny (update) User 'otherUserId' cannot update the encoded image for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @deny (delete) User 'otherUserId' cannot delete the encoded image for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/encodedImages/{encodedImageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for encryption keys. Only the authenticated user
     *              can read and write their own encryption keys.
     * @path /users/{userId}/encryptionKeys/{encryptionKeyId}
     * @allow (create) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can create an encryption key under their user ID.
     *        (data) { id: 'key123', keyName: 'MyKey', algorithm: 'AES', createdAt: '2024-01-03T00:00:00Z', userId: 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' }
     * @allow (get) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can get their own encryption key.
     * @allow (list) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can list their own encryption keys.
     * @allow (update) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can update their own encryption key.
     * @allow (delete) User 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' can delete their own encryption key.
     * @deny (create) User 'otherUserId' cannot create an encryption key under user ID 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     *        (data) { id: 'key123', keyName: 'MyKey', algorithm: 'AES', createdAt: '2024-01-03T00:00:00Z', userId: 'z4hQnSPYUbc3mV2BIQTDCfCYCa83' }
     * @deny (get) User 'otherUserId' cannot get the encryption key for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @deny (list) User 'otherUserId' cannot list the encryption keys for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @deny (update) User 'otherUserId' cannot update the encryption key for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @deny (delete) User 'otherUserId' cannot delete the encryption key for 'z4hQnSPYUbc3mV2BIQTDCfCYCa83'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/encryptionKeys/{encryptionKeyId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}